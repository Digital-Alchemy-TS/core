import { TServiceParams } from "@zcc/boilerplate";
import { LIB_HOME_ASSISTANT } from "@zcc/home-assistant";
import { is } from "@zcc/utilities";
import { existsSync, writeFileSync } from "fs";
import { homedir } from "os";
import { join } from "path";

import { HASS_TYPE_GENERATE } from "./main.mjs";

export function BuildTypes({ logger, lifecycle, getApis }: TServiceParams) {
  let targetFile: string;
  const hass = getApis(LIB_HOME_ASSISTANT);
  const app = getApis(HASS_TYPE_GENERATE);

  lifecycle.onPostConfig(() => {
    targetFile = HASS_TYPE_GENERATE.getConfig("TARGET_FILE");
  });

  // ? join(__dirname, "..", "home-assistant", "src", "dynamic.d.mts")
  lifecycle.onReady(async () => {
    try {
      const path = is.empty(targetFile)
        ? join(homedir(), "output.d.mts")
        : targetFile;
      if (!existsSync(path)) {
        if (targetFile !== path) {
          // Represents an error with the script
          // Calculated the wrong path, and something is up
          logger.fatal({ path }, `cannot locate target file, aborting`);
          return;
        }
        logger.warn({ path }, `creating new type definitions file`);
      }
      const text = await DoBuild();
      writeFileSync(path, text);
      logger.info(`successfully wrote hass type definitions file`);
    } catch (error) {
      logger.fatal({ error }, `failed to write type definitions file`);
    }
  });

  // see file - libs/home-assistant/src/dynamic.mts
  async function DoBuild() {
    logger.info(`Pulling information`);
    const typeInterface = await app.typeWriter();
    const entities = await hass.fetch.getAllEntities();
    return [
      `// This file is generated, and is automatically updated as a npm post install step`,
      "// Do not edit this file, it will only affect type definitions, not functional code",
      "",
      `import { PICK_ENTITY } from "./helpers/index.mjs";`,
      "",
      `export const ENTITY_SETUP = ${entities};`,
      "",
      typeInterface,
      "",
    ].join(`\n`);
  }
}
